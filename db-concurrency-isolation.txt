- Untuk menangani permasalahan data race / race condition di DBMS perlu dilakukan concurrency control.
- Concurency control di DBMS bisa dilakukan menggunakan isolation level di database transaction.
- Beberapa jenis isolation level di DBMS:
    - Read Uncommitted
    - Read Committed (default isolation level di DBMS)
    - Repeatable Read
    - Serializable

- Hal yang perlu diketahui sebelum isolation level adalah istilah Read Phenomena, permasalahan dalam proses baca data di DBMS.
    - Dirty Read:
        - dirty read bisa terjadi jika menggunakan isolation level read-uncommitted, tetapi ini tidak di implement di postgres, jadi di postgres gak akan terjadi dirty read.
        - terjadi ketika transaction1 bisa baca hasil perubahan transaction2 yang belum di commit.

        misal dari table "products" berikut: 
        |------------------------------------|
        | id |     name      |     stock     |
        |------------------------------------|
        | 1  |     apel      |     10        |
        |------------------------------------|

        transaction 1:                                                      transaction 2:
        SELECT stock FROM products WHERE id = 1; // dapet hasil 10          BEGIN;
                                                                            UPDATE products SET stock = 9 WHERE id = 1;  // belum commit
        --------------------------------------------------------------------------------------------------------------------------------
        SELECT stock FROM products WHERE id = 1; // dapet nilai 9           ROLLBACK; // stock kembali ke nilai semula 10

        - dari contoh diatas, hasil akhir dari transaction 1 akan mendapatkan nilai 9 yang seharusnya tidak boleh terjadi, karena transaction 2 melakukan rollback ke nilai semula.

    - Non-repeatable read:
        - non-repeatable read bisa terjadi kalo mode isolation nya read-uncommitted atau read-committed
        - terjadi ketika query row 2x atau lebih, dan setiap query menghasilkan query yang berbeda karena ada perubahan dari transaction lain yang berhasil commit.
        
        Contoh:

        transaction 1:                                                      transaction 2:
        BEGIN;
        SELECT stock FROM products WHERE id = 1; // dapet hasil 10          BEGIN;
                                                                            UPDATE products SET stock = 11 WHERE id = 1;
                                                                            COMMIT;
        --------------------------------------------------------------------------------------------------------------------------------
        SELECT stock FROM products WHERE id = 1; // dapet nilai 11

    - Phantom read:
        - 

Referensi:
https://en.wikipedia.org/wiki/Isolation_(database_systems)#Concurrency_control
https://pgdash.io/blog/postgres-transactions.html

Belum dibaca:
https://dev.to/techschoolguru/understand-isolation-levels-read-phenomena-in-mysql-postgres-c2e
